name: CI/CD - Build, Test, Docs

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      deps-cache-hit: ${{ steps.cache-deps.outputs.cache-hit }}
    steps:
      - name: Checkout repository (with submodules)
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Cache apt packages (optional)
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: /var/cache/apt
          key: apt-cache-${{ runner.os }}
          restore-keys: |
            apt-cache-${{ runner.os }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential valgrind doxygen graphviz python3-pip

      - name: Install Norminette
        run: |
          if ! command -v norminette &> /dev/null; then
            python3 -m pip install --upgrade pip
            python3 -m pip install norminette
          fi

  compile:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout repository (with submodules)
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Build and install
        run: |
          make clean
          make
          make install

  test:
    runs-on: ubuntu-latest
    needs: compile
    steps:
      - name: Checkout repository (with submodules)
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Run standard tests
        run: |
          make clean
          make test

  test-valgrind:
    runs-on: ubuntu-latest
    needs: compile
    steps:
      - name: Checkout repository (with submodules)
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Run tests with Valgrind
        run: |
          make clean
          make test-valgrind

  generate-docs:
    runs-on: ubuntu-latest
    needs: [test, test-valgrind]
    steps:
      - name: Checkout repository (with submodules)
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Generate Doxygen documentation
        run: |
          doxygen Doxyfile

      - name: Deploy documentation to GitHub Pages
        uses: peaceiris/actions-gh-pages@v6
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/html

  norminette:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout repository (with submodules)
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Run norminette on src
        run: |
          echo "Current dir: $(pwd)"
          ls -ls
          make norminette
