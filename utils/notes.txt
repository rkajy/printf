t_printf()


In C, the printf function uses format specifiers to control how values are converted to text. The characters you listed—cspdiuxX%—are conversion specifiers used in the printf format string.

    **c – Prints a single character (e.g., printf("%c", 'A'); → A)
    **s – Prints a string (null-terminated char array) (e.g., printf("%s", "Hello"); → Hello)
    **p – Prints a pointer (memory address) (e.g., printf("%p", ptr); → 0x7ffee4f8)
    **d – Prints a signed decimal integer (e.g., printf("%d", -42); → -42)
    **I – Same as d (signed decimal integer)
    *u – Prints an unsigned decimal integer (e.g., printf("%u", 42); → 42)
    **x – Prints an unsigned hexadecimal integer (lowercase letters) (e.g., printf("%x", 255); → ff)
    **X – Prints an unsigned hexadecimal integer (uppercase letters) (e.g., printf("%X", 255); → FF)
    **% – Printsxlear a literal % (e.g., printf("%%"); → %)


Test Cases for Bonus

1. flag_plus (always show sign)

ft_printf("1 -> |%+d|\n", 42);     // expected: |+42|

ft_printf("2 -> |%+d|\n", -42);    // expected: |-42|


2. flag_space (only if no +)

ft_printf("3 -> |% d|\n", 42);     // expected: | 42|

ft_printf("4 -> |% d|\n", -42);    // expected: |-42|


3. flag_zero (pad with zeros)

ft_printf("5 -> |%05d|\n", 42);    // expected: |00042|

ft_printf("6 -> |%05d|\n", -42);   // expected: |-0042|


4. flag_minus (left align)

ft_printf("7 -> |%-5d|\n", 42);    // expected: |42   |

ft_printf("8 -> |%-5d|\n", -42);   // expected: |-42  |


5. Precision on numbers

ft_printf("9  -> |%.5d|\n", 42);   // expected: |00042|

ft_printf("10 -> |%.5d|\n", -42);  // expected: |-00042|

ft_printf("11 -> |%.0d|\n", 0);    // expected: | |


6. Precision on strings

ft_printf("12 -> |%.3s|\n", "Hello"); // expected: |Hel|

ft_printf("13 -> |%.0s|\n", "Hello"); // expected: ||


*****/DON't FORGET TO CHECK from 7

7. Combine width + precision

ft_printf("14 -> |%10.5d|\n", 42); // expected: |     00042|

ft_printf("15 -> |%-10.5d|\n", 42);// expected: |00042     |


8. Combine + and precision

ft_printf("16 -> |%+10.5d|\n", 42);// expected: |    +00042|


9. Combine space and width

ft_printf("17 -> |% 10d|\n", 42);  // expected: |        42|


10. %p (pointer) with width

void *ptr = (void*)0x1234;

ft_printf("18 -> |%20p|\n", ptr); // expected: |             0x1234|


Extra: Zero flag + precision interaction (important)

ft_printf("19 -> |%010.5d|\n", 42); // expected: |     00042|


** The 0x prefix is a convention in C (and many other languages) to indicate that the number following it is in hexadecimal (base 16).



// typedef struct s_format {
// 	int flag_minus; // Left alignment, eg ft_printf("%-d", 42) should print "42 ", ft_printf("%-d", -42) should print "-42 ", ft_printf("%-5d", 42) should print "42   ", ft_printf("%-5d", -42) should print "-42  "
// 	int flag_plus; // Force sign for positive numbers, eg ft_printf("%+d", 42) should print "+42", ft_printf("%+d", -42) should print "-42"
// 	int flag_space; // Space before positive numbers, eg ft_printf("% d", 42) should print " 42", ft_printf("% d", -42) should print "-42"
// 	int flag_zero; // Zero padding, eg ft_printf("%05d", 42) should print "00042", ft_printf("%05d", -42) should print "-0042"
// 	int flag_hash; // Alternate form for hexadecimal and octal, eg ft_printf("%#x", 255) should print "0xff"
// 	char type; // Format specifier (c, s, d, i, u, x, X, p, %)
// 	int width; // Minimum field width, eg ft_printf("%10d", 42) should print "        42", ft_printf("%-10d", 42) should print "42        ", ft_printf("%5s", "Hello") should print "Hello", ft_printf("%-5s", "Hello") should print "Hello"
// 	int precision; // Precision for floating-point numbers or string truncation, eg ft_printf("%.2f", 3.14159) should print "3.14", ft_printf("%.5s", "Hello") should print "Hello", 
// 	// ft_printf("%10s", "Hi") should print "        Hi", ft_printf("%-10s", "Hi") should print "Hi        "
// 	// ft_printf("%5d", 42) should print "   42", ft_printf("%-5d", 42) should print "42   ", ft_printf("%05d", 42) should print "00042"
// 	// ft_printf("%5.2f", 3.14159) should print " 3.14", ft_printf("%-5.2f", 3.14159) should print "3.14 "
// 	// ft_printf("%5.2s", "Hello") should print "He   ", ft_printf("%-5.2s", "Hello") should print "He   "
// 	// ft_printf("%5c", 'A') should print "    A", ft_printf("%-5c", 'A') should print "A    "
// 	// ft_printf("%.5d", 42) should print "00042", ft_printf("%.5d", -42) should print "-0042"
// 	// ft_printf(".0d", 0) should print "", ft_printf(".0d", 42) should print "42", ft_printf(".0d", -42) should print "-42"
// 	// ft_print("%.3s", "Hello") should print "Hel", ft_printf("%.3s", NULL) should print "(null)"
// 	// ft_printf("%.0s", "Hello") should print "", ft_printf("%.0s", NULL) should print ""
// } t_format;